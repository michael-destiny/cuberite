# Build command:
# cmake . -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=16 -DCMAKE_BUILD_TYPE=Release -DCMAKE_ANDROID_ARCH_ABI=armeabi -G "MinGW Makefiles" -DCMAKE_MAKE_PROGRAM="" -DCMAKE_ANDROID_NDK=""

cmake_minimum_required (VERSION 3.7)
project(Cuberite)
include(ExternalProject)

# Set up Android parameters
add_definitions(-DANDROID)
set(ANDROID TRUE)
# set(LIBRARY_OUTPUT_PATH "${CMAKE_SOURCE_DIR}/libs/${CMAKE_ANDROID_ARCH_ABI}")
set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fPIE -pie")

# Tell Lua to not use unimplemented Android locale features
add_definitions(-Dgetlocaledecpoint\(\)="'.'")

# We're crosscompiling for Android
set(CROSSCOMPILE TRUE)

# SYSTEM flag to silence warnings for external headers
include_directories(SYSTEM
	../lib/
	../src/
	../lib/jsoncpp/include/
	../lib/polarssl/include/
	../lib/sqlitecpp/include/
	../lib/sqlitecpp/sqlite3/
	../lib/libevent/include/
)

# Disable some compiler warnings (the lazy way out)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-double-promotion -Wno-reserved-id-macro")

# Compile a lua library for local architecture
externalproject_add(lua_native
	SOURCE_DIR ../lib/lua
	CMAKE_GENERATOR "Visual Studio 14 2015"
	CMAKE_ARGS -DANDROID_CROSSCOMPILE=TRUE
	BUILD_COMMAND
		${CMAKE_COMMAND} --build <BINARY_DIR> --config Release
	INSTALL_COMMAND ""
)

# Get where it went in order to tell tolua
externalproject_get_property(lua_native BINARY_DIR)

# Compile a locally executable tolua binary
externalproject_add(tolua_native
	SOURCE_DIR ../lib/tolua++
	CMAKE_GENERATOR "Visual Studio 14 2015"
	CMAKE_ARGS -DANDROID_CROSSCOMPILE=TRUE -DANDROID_LUA_DIR=${BINARY_DIR}
	BUILD_COMMAND
		${CMAKE_COMMAND} --build <BINARY_DIR> --config Release
	INSTALL_COMMAND ""
)

# And get where it went to tell BindingDependencies
externalproject_get_property(tolua_native BINARY_DIR)

# Probably not the recommended method, but other ways don't seem to generate libraries in libs/armeabi
add_subdirectory(../ Cuberite)

# Perform gymnastics to be able to run bindings generation but with the tolua we just built
get_directory_property(BINDING_OUTPUTS DIRECTORY ../src/Bindings DEFINITION BINDING_OUTPUTS)
ADD_CUSTOM_COMMAND(
		OUTPUT ${BINDING_OUTPUTS}

		COMMAND ${BINARY_DIR}/Release/tolua -L BindingsProcessor.lua -o  Bindings.cpp -H  Bindings.h AllToLua.pkg
		WORKING_DIRECTORY ../src/Bindings
)
add_custom_target(BindingDependencies ALL DEPENDS ${BINDING_OUTPUTS})

# Dependency order BindingDependencies (i.e. generation) -> tolua_native -> lua_native
add_dependencies(tolua_native lua_native)
add_dependencies(BindingDependencies tolua_native)
